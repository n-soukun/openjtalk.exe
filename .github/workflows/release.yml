name: Release OpenJTalk

on:
  push:
    branches: [main, master]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for the release (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"
      release_name:
        description: "Release name"
        required: true
        default: "OpenJTalk Release"
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

jobs:
  build-matrix:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows
            runner: windows-latest
            arch: x64
            artifact_name: openjtalk-windows-x64
            executable_ext: .exe
          - os: linux
            runner: ubuntu-latest
            arch: x64
            artifact_name: openjtalk-linux-x64
            executable_ext: ""
          - os: macos
            runner: macos-latest
            arch: x64
            artifact_name: openjtalk-macos-x64
            executable_ext: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Windows specific setup
      - name: Setup MSBuild (Windows)
        if: matrix.os == 'windows'
        uses: microsoft/setup-msbuild@v2

      - name: Setup MSVC environment (Windows)
        if: matrix.os == 'windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Set Japanese Locale (Windows)
        if: matrix.os == 'windows'
        run: |
          Set-WinSystemLocale ja-JP
          Set-WinUILanguageOverride ja-JP
          [System.Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("shift_jis")
        shell: pwsh

      # Linux/macOS specific setup
      - name: Install dependencies (Linux)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos'
        run: |
          brew install autoconf automake libtool

      # Build using Makefile
      - name: Build OpenJTalk
        run: make build
        shell: bash

      - name: Test executable
        run: make test
        shell: bash
        continue-on-error: true

      - name: Prepare artifacts
        run: make prepare-artifacts
        shell: bash

      - name: List artifacts (Debug)
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            ls -la artifacts/
          else
            ls -la artifacts/
          fi

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/
          retention-days: 7

  create-release:
    name: Create Release
    needs: build-matrix
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download all artifacts from matrix builds
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: openjtalk-windows-x64
          path: release-assets/windows/

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: openjtalk-linux-x64
          path: release-assets/linux/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: openjtalk-macos-x64
          path: release-assets/macos/

      # Create compressed archives for each platform
      - name: Create release archives
        run: |
          mkdir -p release-packages

          # Windows package
          cd release-assets/windows
          zip -r ../../release-packages/openjtalk-windows-x64.zip .
          cd ../..

          # Linux package
          cd release-assets/linux
          tar -czf ../../release-packages/openjtalk-linux-x64.tar.gz .
          cd ../..

          # macOS package
          cd release-assets/macos
          tar -czf ../../release-packages/openjtalk-macos-x64.tar.gz .
          cd ../..

          # List created packages
          ls -la release-packages/

      # Determine release tag and name
      - name: Set release variables
        id: release_vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
          else
            # Extract tag name from ref
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "release_name=OpenJTalk ${TAG_NAME}" >> $GITHUB_OUTPUT
            # Check if it's a pre-release (contains alpha, beta, rc, etc.)
            if [[ "${TAG_NAME}" =~ (alpha|beta|rc|pre) ]]; then
              echo "prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "prerelease=false" >> $GITHUB_OUTPUT
            fi
          fi

      # Generate release notes
      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## OpenJTalk Release ${{ steps.release_vars.outputs.tag_name }}

          ### 📦 Downloads

          | Platform | Architecture | Download |
          |----------|-------------|----------|
          | Windows  | x64         | [openjtalk-windows-x64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.release_vars.outputs.tag_name }}/openjtalk-windows-x64.zip) |
          | Linux    | x64         | [openjtalk-linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.release_vars.outputs.tag_name }}/openjtalk-linux-x64.tar.gz) |
          | macOS    | x64         | [openjtalk-macos-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.release_vars.outputs.tag_name }}/openjtalk-macos-x64.tar.gz) |

          ### 🛠️ Build Information

          - **Built with**: Multi-platform Makefile
          - **CI/CD**: GitHub Actions
          - **Commit**: ${{ github.sha }}
          - **Build date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ### 📋 Usage

          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the `open_jtalk` executable

          For detailed usage instructions, please refer to the [README](https://github.com/${{ github.repository }}/blob/main/Readme.md).

          ### 🔄 Changes

          This release includes the latest changes from the main branch as of commit ${{ github.sha }}.

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.release_vars.outputs.tag_name }}
          EOF

          # Set multiline output
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Create the release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_vars.outputs.tag_name }}
          name: ${{ steps.release_vars.outputs.release_name }}
          body: ${{ steps.release_notes.outputs.body }}
          draft: false
          prerelease: ${{ steps.release_vars.outputs.prerelease }}
          files: |
            release-packages/openjtalk-windows-x64.zip
            release-packages/openjtalk-linux-x64.tar.gz
            release-packages/openjtalk-macos-x64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Legacy upload steps for compatibility (these will be skipped since files are uploaded above)
      - name: Upload Windows Release Asset
        if: false
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/openjtalk-windows-x64.zip
          asset_name: openjtalk-windows-x64.zip
          asset_content_type: application/zip

      - name: Upload Linux Release Asset
        if: false
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/openjtalk-linux-x64.tar.gz
          asset_name: openjtalk-linux-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS Release Asset
        if: false
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-packages/openjtalk-macos-x64.tar.gz
          asset_name: openjtalk-macos-x64.tar.gz
          asset_content_type: application/gzip

  # Optional: Cleanup artifacts after successful release
  cleanup:
    name: Cleanup Artifacts
    needs: [build-matrix, create-release]
    runs-on: ubuntu-latest
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: Delete build artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            openjtalk-windows-x64
            openjtalk-linux-x64
            openjtalk-macos-x64
        continue-on-error: true
